// Media Queries in Sass 3.2
//
// These mixins make media queries a breeze with Sass.
// The media queries from mobile up until desktop all
// trigger at different points along the way
//
// And important point to remember is that and width
// over the portrait width is considered to be part of the
// landscape width. This allows us to capture widths of devices
// that might not fit the dimensions exactly. This means the break
// points are seamless.

$mq-mobile-portrait		: 320px !default;
$mq-mobile-landscape	: 480px !default;
$mq-tablet-portrait		: 960px !default;
$mq-tablet-landscape	: 1024px !default;
$mq-desktop				: 1382px !default;

// Both portrait and landscape
@mixin mobile-only {
  @media (max-width : $mq-mobile-landscape) {
    @content;
  }
}

// Everything up to and including the portrait width of the phone
// Since it's the smallest query it doesn't need a min
@mixin mobile-portrait-only {
  @media (max-width : $mq-mobile-portrait) {
    @content;
  }
}

// Everything up to and including the mobile portrait
@mixin mobile-portrait-and-below {
  @media (max-width : $mq-mobile-portrait) {
    @content;
  }
}

// Everything above and including the mobile portrait
@mixin mobile-portrait-and-up {
  @media (min-width : $mq-mobile-portrait) {
    @content;
  }
}

// Everthing larger than a portrait mobile up until mobile landscape
@mixin mobile-landscape-only {
  @media only screen and (min-width : $mq-mobile-portrait + 1) and (max-width : $mq-mobile-landscape) {
    @content;
  }
}

// Everything up to and including the mobile landscape width
@mixin mobile-landscape-and-below {
  @media only screen and (max-width : $mq-mobile-landscape) {
    @content;
  }
}

// Everything above and including the mobile landscape width
@mixin mobile-landscape-and-up {
  @media only screen and (min-width : $mq-mobile-portrait + 1) {
    @content;
  }
}

// Both the portrait and landscape width of the tablet
// Larger than a landscape mobile but less than or equal to a landscape tablet
@mixin tablet-only {
  @media only screen and (min-width : $mq-mobile-landscape + 1) and (max-width : $mq-tablet-landscape) {
    @content;
  }
}

// Everything larger than mobile landscape up until the portrait width of the tablet
@mixin tablet-portrait-only {
  @media only screen and (min-width : $mq-mobile-landscape + 1) and (max-width : $mq-tablet-portrait) {
    @content;
  }
}

// Everything below and including the portrait width of the tablet
@mixin tablet-portrait-and-below {
  @media only screen and (max-width : $mq-tablet-portrait) {
    @content;
  }
}

// Everything above and including the portrait width of the tablet
@mixin tablet-portrait-and-up {
  @media only screen and (min-width : $mq-mobile-landscape + 1) {
    @content;
  }
}

// Larger than portrait but less than or equal to the landscape width
@mixin tablet-landscape-only {
  @media only screen and (min-width : $mq-tablet-portrait + 1) and (max-width : $mq-tablet-landscape) {
    @content;
  }
}

// Up to and including the tablet landscape
@mixin tablet-landscape-and-below {
  @media only screen and (max-width : $mq-tablet-landscape) {
    @content;
  }
}

// Everything larger than portrait tablet
@mixin tablet-landscape-and-up {
  @media only screen and (min-width : $mq-tablet-portrait + 1) {
    @content;
  }
}

// Everything larger than a landscape tablet
@mixin desktop-and-up {
  @media only screen and (min-width : $mq-tablet-landscape + 1) {
    @content;
  }
}

// Everything below and including the desktop
@mixin desktop-and-below {
  @media only screen and (max-width : $mq-desktop) {
    @content;
  }
}

// Everything larger than a landscape tablet but less than or equal to the desktop
@mixin desktop-only {
  @media only screen and (min-width : $mq-tablet-landscape + 1) and (max-width : $mq-desktop) {
    @content;
  }
}

// Retina screens have a 1.5 pixel ratio, not 2
@mixin retina {
  @media only screen and (-webkit-min-device-pixel-ratio : 1.5), only screen and (min-device-pixel-ratio : 1.5) {
    @content;
  }
}

@mixin opacity( $value: 1.0 ) {
  opacity: $value;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=" $value * 100 ")";
  filter: alpha(opacity= $value * 100 );
  zoom: 1;
}

@mixin rounded($vert, $horz, $radius: 10px) {
  border-#{$vert}-#{$horz}-radius: $radius;
  -moz-border-radius-#{$vert}#{$horz}: $radius;
  -webkit-border-#{$vert}-#{$horz}-radius: $radius;
}

@mixin rounded-all($radius: 10px){
  border-radius: $radius;
  -moz-border-radius: $radius;
  -webkit-border-radius: $radius;
}

@mixin linear-gradient($startColor, $endColor) {
  background-image: -webkit-linear-gradient($startColor, $endColor);
  background-image:    -moz-linear-gradient($startColor, $endColor);
  background-image:      -o-linear-gradient($startColor, $endColor);
  background-image:     -ms-linear-gradient($startColor, $endColor);
  background-image:         linear-gradient($startColor, $endColor);
}

@mixin box-shadow($x, $y, $spread, $color) {
  -webkit-box-shadow: $x $y $spread $color;
     -moz-box-shadow: $x $y $spread $color;
      -ms-box-shadow: $x $y $spread $color;
          box-shadow: $x $y $spread $color;
}

@mixin box-shadow-double($x1, $y1, $spread1, $color1, 
                         $x2, $y2, $spread2, $color2) {
  -webkit-box-shadow: $x1 $y1 $spread1 $color1,
                      $x2 $y2 $spread2 $color2;
     -moz-box-shadow: $x1 $y1 $spread1 $color1,
                      $x2 $y2 $spread2 $color2;
      -ms-box-shadow: $x1 $y1 $spread1 $color1,
                      $x2 $y2 $spread2 $color2;
          box-shadow: $x1 $y1 $spread1 $color1,
                      $x2 $y2 $spread2 $color2;
}

@mixin perspective($value) {
  -webkit-perspective: $value;
     -moz-perspective: $value;
       -o-perspective: $value;
      -ms-perspective: $value;
          perspective: $value;
}

@mixin perspective-origin($value) {
  -webkit-perspective-origin: $value;
     -moz-perspective-origin: $value;
       -o-perspective-origin: $value;
      -ms-perspective-origin: $value;
          perspective-origin: $value;
}

@mixin transition($prop, $dur, $ease) {
  -webkit-transition: $prop $dur $ease;
     -moz-transition: $prop $dur $ease;
       -o-transition: $prop $dur $ease;
      -ie-transition: $prop $dur $ease;
          transition: $prop $dur $ease;
}

@mixin transform($value) {
  -webkit-transform: translateZ($value);
     -moz-transform: translateZ($value);
       -o-transform: translateZ($value);
      -ms-transform: translateZ($value);
          transform: translateZ($value);
}

@mixin box-shadow-inset($x, $y, $spread, $color) {
  -webkit-box-shadow: inset $x $y $spread $color;
     -moz-box-shadow: inset $x $y $spread $color;
      -ms-box-shadow: inset $x $y $spread $color;
          box-shadow: inset $x $y $spread $color;
}

@mixin debugBorder{
    border-style: dashed;
    border-color: #fff;
}

@mixin noPadnoMar{
    margin: 0;
    padding: 0;
}

@mixin shadowBorder{
    text-shadow: -2px 0 black, 0 2px black, 2px 0 black, 0 -2px black;
}